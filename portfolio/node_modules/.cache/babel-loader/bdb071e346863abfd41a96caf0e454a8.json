{"ast":null,"code":"export function CurvesPathGen(rndFunc, period, nbHarmonics, attenHarmonics) {\n  let lowValue = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n  let highValue = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;\n  const arP0 = [],\n        arP1 = [],\n        amplitudes = [],\n        increments = [],\n        phases = [],\n        randomFunc = rndFunc !== null && rndFunc !== void 0 ? rndFunc : Math.random;\n  let globAmplitude = 0;\n  if (nbHarmonics < 1) nbHarmonics = 1;\n\n  for (let kh = 1; kh <= nbHarmonics; ++kh) {\n    arP0[kh] = randomFunc();\n    arP1[kh] = randomFunc();\n    amplitudes[kh] = kh === 1 ? 1 : amplitudes[kh - 1] * attenHarmonics;\n    globAmplitude += amplitudes[kh];\n    increments[kh] = kh / period;\n    phases[kh] = randomFunc();\n  }\n\n  amplitudes.forEach((value, kh) => amplitudes[kh] = value / globAmplitude * (highValue - lowValue));\n  return () => {\n    let pf,\n        pfl,\n        signal = 0;\n\n    for (let kh = nbHarmonics; kh >= 1; --kh) {\n      pf = phases[kh] += increments[kh];\n\n      if (phases[kh] >= 1) {\n        pf = phases[kh] -= 1;\n        arP0[kh] = arP1[kh];\n        arP1[kh] = randomFunc();\n      }\n\n      pfl = pf ** 2 * (3 - 2 * pf);\n      signal += (arP0[kh] * (1 - pfl) + arP1[kh] * pfl) * amplitudes[kh];\n    }\n\n    return signal + lowValue;\n  };\n}","map":{"version":3,"names":["CurvesPathGen","rndFunc","period","nbHarmonics","attenHarmonics","lowValue","highValue","arP0","arP1","amplitudes","increments","phases","randomFunc","Math","random","globAmplitude","kh","forEach","value","pf","pfl","signal"],"sources":["C:/Users/golde/Documents/projects/portfolio/node_modules/tsparticles-path-curves/esm/Curves.js"],"sourcesContent":["export function CurvesPathGen(rndFunc, period, nbHarmonics, attenHarmonics, lowValue = 0, highValue = 1) {\n    const arP0 = [], arP1 = [], amplitudes = [], increments = [], phases = [], randomFunc = rndFunc !== null && rndFunc !== void 0 ? rndFunc : Math.random;\n    let globAmplitude = 0;\n    if (nbHarmonics < 1)\n        nbHarmonics = 1;\n    for (let kh = 1; kh <= nbHarmonics; ++kh) {\n        arP0[kh] = randomFunc();\n        arP1[kh] = randomFunc();\n        amplitudes[kh] = kh === 1 ? 1 : amplitudes[kh - 1] * attenHarmonics;\n        globAmplitude += amplitudes[kh];\n        increments[kh] = kh / period;\n        phases[kh] = randomFunc();\n    }\n    amplitudes.forEach((value, kh) => (amplitudes[kh] = (value / globAmplitude) * (highValue - lowValue)));\n    return () => {\n        let pf, pfl, signal = 0;\n        for (let kh = nbHarmonics; kh >= 1; --kh) {\n            pf = phases[kh] += increments[kh];\n            if (phases[kh] >= 1) {\n                pf = phases[kh] -= 1;\n                arP0[kh] = arP1[kh];\n                arP1[kh] = randomFunc();\n            }\n            pfl = pf ** 2 * (3 - 2 * pf);\n            signal += (arP0[kh] * (1 - pfl) + arP1[kh] * pfl) * amplitudes[kh];\n        }\n        return signal + lowValue;\n    };\n}\n"],"mappings":"AAAA,OAAO,SAASA,aAAT,CAAuBC,OAAvB,EAAgCC,MAAhC,EAAwCC,WAAxC,EAAqDC,cAArD,EAAkG;EAAA,IAA7BC,QAA6B,uEAAlB,CAAkB;EAAA,IAAfC,SAAe,uEAAH,CAAG;EACrG,MAAMC,IAAI,GAAG,EAAb;EAAA,MAAiBC,IAAI,GAAG,EAAxB;EAAA,MAA4BC,UAAU,GAAG,EAAzC;EAAA,MAA6CC,UAAU,GAAG,EAA1D;EAAA,MAA8DC,MAAM,GAAG,EAAvE;EAAA,MAA2EC,UAAU,GAAGX,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyCA,OAAzC,GAAmDY,IAAI,CAACC,MAAhJ;EACA,IAAIC,aAAa,GAAG,CAApB;EACA,IAAIZ,WAAW,GAAG,CAAlB,EACIA,WAAW,GAAG,CAAd;;EACJ,KAAK,IAAIa,EAAE,GAAG,CAAd,EAAiBA,EAAE,IAAIb,WAAvB,EAAoC,EAAEa,EAAtC,EAA0C;IACtCT,IAAI,CAACS,EAAD,CAAJ,GAAWJ,UAAU,EAArB;IACAJ,IAAI,CAACQ,EAAD,CAAJ,GAAWJ,UAAU,EAArB;IACAH,UAAU,CAACO,EAAD,CAAV,GAAiBA,EAAE,KAAK,CAAP,GAAW,CAAX,GAAeP,UAAU,CAACO,EAAE,GAAG,CAAN,CAAV,GAAqBZ,cAArD;IACAW,aAAa,IAAIN,UAAU,CAACO,EAAD,CAA3B;IACAN,UAAU,CAACM,EAAD,CAAV,GAAiBA,EAAE,GAAGd,MAAtB;IACAS,MAAM,CAACK,EAAD,CAAN,GAAaJ,UAAU,EAAvB;EACH;;EACDH,UAAU,CAACQ,OAAX,CAAmB,CAACC,KAAD,EAAQF,EAAR,KAAgBP,UAAU,CAACO,EAAD,CAAV,GAAkBE,KAAK,GAAGH,aAAT,IAA2BT,SAAS,GAAGD,QAAvC,CAApD;EACA,OAAO,MAAM;IACT,IAAIc,EAAJ;IAAA,IAAQC,GAAR;IAAA,IAAaC,MAAM,GAAG,CAAtB;;IACA,KAAK,IAAIL,EAAE,GAAGb,WAAd,EAA2Ba,EAAE,IAAI,CAAjC,EAAoC,EAAEA,EAAtC,EAA0C;MACtCG,EAAE,GAAGR,MAAM,CAACK,EAAD,CAAN,IAAcN,UAAU,CAACM,EAAD,CAA7B;;MACA,IAAIL,MAAM,CAACK,EAAD,CAAN,IAAc,CAAlB,EAAqB;QACjBG,EAAE,GAAGR,MAAM,CAACK,EAAD,CAAN,IAAc,CAAnB;QACAT,IAAI,CAACS,EAAD,CAAJ,GAAWR,IAAI,CAACQ,EAAD,CAAf;QACAR,IAAI,CAACQ,EAAD,CAAJ,GAAWJ,UAAU,EAArB;MACH;;MACDQ,GAAG,GAAGD,EAAE,IAAI,CAAN,IAAW,IAAI,IAAIA,EAAnB,CAAN;MACAE,MAAM,IAAI,CAACd,IAAI,CAACS,EAAD,CAAJ,IAAY,IAAII,GAAhB,IAAuBZ,IAAI,CAACQ,EAAD,CAAJ,GAAWI,GAAnC,IAA0CX,UAAU,CAACO,EAAD,CAA9D;IACH;;IACD,OAAOK,MAAM,GAAGhB,QAAhB;EACH,CAbD;AAcH"},"metadata":{},"sourceType":"module"}