{"ast":null,"code":"import _classCallCheck from \"C:/Users/golde/Documents/projects/portfolio/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/golde/Documents/projects/portfolio/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { getRangeValue } from \"tsparticles-engine\";\n\nfunction updateWobble(particle, delta) {\n  var _a;\n\n  var wobble = particle.options.wobble;\n\n  if (!wobble.enable || !particle.wobble) {\n    return;\n  }\n\n  var speed = particle.wobble.speed * delta.factor;\n  var distance = ((_a = particle.retina.wobbleDistance) !== null && _a !== void 0 ? _a : 0) * delta.factor / (1000 / 60);\n  var max = 2 * Math.PI;\n  particle.wobble.angle += speed;\n\n  if (particle.wobble.angle > max) {\n    particle.wobble.angle -= max;\n  }\n\n  particle.position.x += distance * Math.cos(particle.wobble.angle);\n  particle.position.y += distance * Math.abs(Math.sin(particle.wobble.angle));\n}\n\nexport var WobbleUpdater = /*#__PURE__*/function () {\n  function WobbleUpdater(container) {\n    _classCallCheck(this, WobbleUpdater);\n\n    this.container = container;\n  }\n\n  _createClass(WobbleUpdater, [{\n    key: \"init\",\n    value: function init(particle) {\n      var wobbleOpt = particle.options.wobble;\n\n      if (wobbleOpt.enable) {\n        particle.wobble = {\n          angle: Math.random() * Math.PI * 2,\n          speed: getRangeValue(wobbleOpt.speed) / 360\n        };\n      } else {\n        particle.wobble = {\n          angle: 0,\n          speed: 0\n        };\n      }\n\n      particle.retina.wobbleDistance = getRangeValue(wobbleOpt.distance) * this.container.retina.pixelRatio;\n    }\n  }, {\n    key: \"isEnabled\",\n    value: function isEnabled(particle) {\n      return !particle.destroyed && !particle.spawning && particle.options.wobble.enable;\n    }\n  }, {\n    key: \"update\",\n    value: function update(particle, delta) {\n      if (!this.isEnabled(particle)) {\n        return;\n      }\n\n      updateWobble(particle, delta);\n    }\n  }]);\n\n  return WobbleUpdater;\n}();","map":{"version":3,"names":["getRangeValue","updateWobble","particle","delta","_a","wobble","options","enable","speed","factor","distance","retina","wobbleDistance","max","Math","PI","angle","position","x","cos","y","abs","sin","WobbleUpdater","container","wobbleOpt","random","pixelRatio","destroyed","spawning","isEnabled"],"sources":["C:/Users/golde/Documents/projects/portfolio/node_modules/tsparticles-updater-wobble/esm/WobbleUpdater.js"],"sourcesContent":["import { getRangeValue } from \"tsparticles-engine\";\nfunction updateWobble(particle, delta) {\n    var _a;\n    const wobble = particle.options.wobble;\n    if (!wobble.enable || !particle.wobble) {\n        return;\n    }\n    const speed = particle.wobble.speed * delta.factor;\n    const distance = (((_a = particle.retina.wobbleDistance) !== null && _a !== void 0 ? _a : 0) * delta.factor) / (1000 / 60);\n    const max = 2 * Math.PI;\n    particle.wobble.angle += speed;\n    if (particle.wobble.angle > max) {\n        particle.wobble.angle -= max;\n    }\n    particle.position.x += distance * Math.cos(particle.wobble.angle);\n    particle.position.y += distance * Math.abs(Math.sin(particle.wobble.angle));\n}\nexport class WobbleUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    init(particle) {\n        const wobbleOpt = particle.options.wobble;\n        if (wobbleOpt.enable) {\n            particle.wobble = {\n                angle: Math.random() * Math.PI * 2,\n                speed: getRangeValue(wobbleOpt.speed) / 360,\n            };\n        }\n        else {\n            particle.wobble = {\n                angle: 0,\n                speed: 0,\n            };\n        }\n        particle.retina.wobbleDistance = getRangeValue(wobbleOpt.distance) * this.container.retina.pixelRatio;\n    }\n    isEnabled(particle) {\n        return !particle.destroyed && !particle.spawning && particle.options.wobble.enable;\n    }\n    update(particle, delta) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        updateWobble(particle, delta);\n    }\n}\n"],"mappings":";;AAAA,SAASA,aAAT,QAA8B,oBAA9B;;AACA,SAASC,YAAT,CAAsBC,QAAtB,EAAgCC,KAAhC,EAAuC;EACnC,IAAIC,EAAJ;;EACA,IAAMC,MAAM,GAAGH,QAAQ,CAACI,OAAT,CAAiBD,MAAhC;;EACA,IAAI,CAACA,MAAM,CAACE,MAAR,IAAkB,CAACL,QAAQ,CAACG,MAAhC,EAAwC;IACpC;EACH;;EACD,IAAMG,KAAK,GAAGN,QAAQ,CAACG,MAAT,CAAgBG,KAAhB,GAAwBL,KAAK,CAACM,MAA5C;EACA,IAAMC,QAAQ,GAAI,CAAC,CAACN,EAAE,GAAGF,QAAQ,CAACS,MAAT,CAAgBC,cAAtB,MAA0C,IAA1C,IAAkDR,EAAE,KAAK,KAAK,CAA9D,GAAkEA,EAAlE,GAAuE,CAAxE,IAA6ED,KAAK,CAACM,MAApF,IAA+F,OAAO,EAAtG,CAAjB;EACA,IAAMI,GAAG,GAAG,IAAIC,IAAI,CAACC,EAArB;EACAb,QAAQ,CAACG,MAAT,CAAgBW,KAAhB,IAAyBR,KAAzB;;EACA,IAAIN,QAAQ,CAACG,MAAT,CAAgBW,KAAhB,GAAwBH,GAA5B,EAAiC;IAC7BX,QAAQ,CAACG,MAAT,CAAgBW,KAAhB,IAAyBH,GAAzB;EACH;;EACDX,QAAQ,CAACe,QAAT,CAAkBC,CAAlB,IAAuBR,QAAQ,GAAGI,IAAI,CAACK,GAAL,CAASjB,QAAQ,CAACG,MAAT,CAAgBW,KAAzB,CAAlC;EACAd,QAAQ,CAACe,QAAT,CAAkBG,CAAlB,IAAuBV,QAAQ,GAAGI,IAAI,CAACO,GAAL,CAASP,IAAI,CAACQ,GAAL,CAASpB,QAAQ,CAACG,MAAT,CAAgBW,KAAzB,CAAT,CAAlC;AACH;;AACD,WAAaO,aAAb;EACI,uBAAYC,SAAZ,EAAuB;IAAA;;IACnB,KAAKA,SAAL,GAAiBA,SAAjB;EACH;;EAHL;IAAA;IAAA,OAII,cAAKtB,QAAL,EAAe;MACX,IAAMuB,SAAS,GAAGvB,QAAQ,CAACI,OAAT,CAAiBD,MAAnC;;MACA,IAAIoB,SAAS,CAAClB,MAAd,EAAsB;QAClBL,QAAQ,CAACG,MAAT,GAAkB;UACdW,KAAK,EAAEF,IAAI,CAACY,MAAL,KAAgBZ,IAAI,CAACC,EAArB,GAA0B,CADnB;UAEdP,KAAK,EAAER,aAAa,CAACyB,SAAS,CAACjB,KAAX,CAAb,GAAiC;QAF1B,CAAlB;MAIH,CALD,MAMK;QACDN,QAAQ,CAACG,MAAT,GAAkB;UACdW,KAAK,EAAE,CADO;UAEdR,KAAK,EAAE;QAFO,CAAlB;MAIH;;MACDN,QAAQ,CAACS,MAAT,CAAgBC,cAAhB,GAAiCZ,aAAa,CAACyB,SAAS,CAACf,QAAX,CAAb,GAAoC,KAAKc,SAAL,CAAeb,MAAf,CAAsBgB,UAA3F;IACH;EAnBL;IAAA;IAAA,OAoBI,mBAAUzB,QAAV,EAAoB;MAChB,OAAO,CAACA,QAAQ,CAAC0B,SAAV,IAAuB,CAAC1B,QAAQ,CAAC2B,QAAjC,IAA6C3B,QAAQ,CAACI,OAAT,CAAiBD,MAAjB,CAAwBE,MAA5E;IACH;EAtBL;IAAA;IAAA,OAuBI,gBAAOL,QAAP,EAAiBC,KAAjB,EAAwB;MACpB,IAAI,CAAC,KAAK2B,SAAL,CAAe5B,QAAf,CAAL,EAA+B;QAC3B;MACH;;MACDD,YAAY,CAACC,QAAD,EAAWC,KAAX,CAAZ;IACH;EA5BL;;EAAA;AAAA"},"metadata":{},"sourceType":"module"}