{"ast":null,"code":"import _classCallCheck from \"C:/Users/golde/Documents/projects/portfolio/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/golde/Documents/projects/portfolio/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { colorToHsl, getRangeValue } from \"tsparticles-engine\";\n\nfunction updateRoll(particle, delta) {\n  var roll = particle.options.roll;\n\n  if (!particle.roll || !roll.enable) {\n    return;\n  }\n\n  var speed = particle.roll.speed * delta.factor;\n  var max = 2 * Math.PI;\n  particle.roll.angle += speed;\n\n  if (particle.roll.angle > max) {\n    particle.roll.angle -= max;\n  }\n}\n\nexport var RollUpdater = /*#__PURE__*/function () {\n  function RollUpdater() {\n    _classCallCheck(this, RollUpdater);\n  }\n\n  _createClass(RollUpdater, [{\n    key: \"init\",\n    value: function init(particle) {\n      var rollOpt = particle.options.roll;\n\n      if (rollOpt.enable) {\n        particle.roll = {\n          angle: Math.random() * Math.PI * 2,\n          speed: getRangeValue(rollOpt.speed) / 360\n        };\n\n        if (rollOpt.backColor) {\n          particle.backColor = colorToHsl(rollOpt.backColor);\n        } else if (rollOpt.darken.enable && rollOpt.enlighten.enable) {\n          var alterType = Math.random() >= 0.5 ? \"darken\" : \"enlighten\";\n          particle.roll.alter = {\n            type: alterType,\n            value: getRangeValue(alterType === \"darken\" ? rollOpt.darken.value : rollOpt.enlighten.value)\n          };\n        } else if (rollOpt.darken.enable) {\n          particle.roll.alter = {\n            type: \"darken\",\n            value: getRangeValue(rollOpt.darken.value)\n          };\n        } else if (rollOpt.enlighten.enable) {\n          particle.roll.alter = {\n            type: \"enlighten\",\n            value: getRangeValue(rollOpt.enlighten.value)\n          };\n        }\n      } else {\n        particle.roll = {\n          angle: 0,\n          speed: 0\n        };\n      }\n    }\n  }, {\n    key: \"isEnabled\",\n    value: function isEnabled(particle) {\n      var roll = particle.options.roll;\n      return !particle.destroyed && !particle.spawning && roll.enable;\n    }\n  }, {\n    key: \"update\",\n    value: function update(particle, delta) {\n      if (!this.isEnabled(particle)) {\n        return;\n      }\n\n      updateRoll(particle, delta);\n    }\n  }]);\n\n  return RollUpdater;\n}();","map":{"version":3,"names":["colorToHsl","getRangeValue","updateRoll","particle","delta","roll","options","enable","speed","factor","max","Math","PI","angle","RollUpdater","rollOpt","random","backColor","darken","enlighten","alterType","alter","type","value","destroyed","spawning","isEnabled"],"sources":["C:/Users/golde/Documents/projects/portfolio/node_modules/tsparticles-updater-roll/esm/RollUpdater.js"],"sourcesContent":["import { colorToHsl, getRangeValue } from \"tsparticles-engine\";\nfunction updateRoll(particle, delta) {\n    const roll = particle.options.roll;\n    if (!particle.roll || !roll.enable) {\n        return;\n    }\n    const speed = particle.roll.speed * delta.factor;\n    const max = 2 * Math.PI;\n    particle.roll.angle += speed;\n    if (particle.roll.angle > max) {\n        particle.roll.angle -= max;\n    }\n}\nexport class RollUpdater {\n    init(particle) {\n        const rollOpt = particle.options.roll;\n        if (rollOpt.enable) {\n            particle.roll = {\n                angle: Math.random() * Math.PI * 2,\n                speed: getRangeValue(rollOpt.speed) / 360,\n            };\n            if (rollOpt.backColor) {\n                particle.backColor = colorToHsl(rollOpt.backColor);\n            }\n            else if (rollOpt.darken.enable && rollOpt.enlighten.enable) {\n                const alterType = Math.random() >= 0.5 ? \"darken\" : \"enlighten\";\n                particle.roll.alter = {\n                    type: alterType,\n                    value: getRangeValue(alterType === \"darken\" ? rollOpt.darken.value : rollOpt.enlighten.value),\n                };\n            }\n            else if (rollOpt.darken.enable) {\n                particle.roll.alter = {\n                    type: \"darken\",\n                    value: getRangeValue(rollOpt.darken.value),\n                };\n            }\n            else if (rollOpt.enlighten.enable) {\n                particle.roll.alter = {\n                    type: \"enlighten\",\n                    value: getRangeValue(rollOpt.enlighten.value),\n                };\n            }\n        }\n        else {\n            particle.roll = { angle: 0, speed: 0 };\n        }\n    }\n    isEnabled(particle) {\n        const roll = particle.options.roll;\n        return !particle.destroyed && !particle.spawning && roll.enable;\n    }\n    update(particle, delta) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        updateRoll(particle, delta);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}