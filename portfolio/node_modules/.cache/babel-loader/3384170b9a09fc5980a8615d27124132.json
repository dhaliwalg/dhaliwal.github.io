{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/golde/Documents/projects/portfolio/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"C:/Users/golde/Documents/projects/portfolio/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/golde/Documents/projects/portfolio/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { Circle } from \"./Circle\";\nimport { CircleWarp } from \"./CircleWarp\";\nimport { Rectangle } from \"./Rectangle\";\nimport { getDistance } from \"../../Utils/NumberUtils\";\nexport var QuadTree = /*#__PURE__*/function () {\n  function QuadTree(rectangle, capacity) {\n    _classCallCheck(this, QuadTree);\n\n    this.rectangle = rectangle;\n    this.capacity = capacity;\n    this.points = [];\n    this.divided = false;\n  }\n\n  _createClass(QuadTree, [{\n    key: \"insert\",\n    value: function insert(point) {\n      var _a, _b, _c, _d, _e;\n\n      if (!this.rectangle.contains(point.position)) {\n        return false;\n      }\n\n      if (this.points.length < this.capacity) {\n        this.points.push(point);\n        return true;\n      }\n\n      if (!this.divided) {\n        this.subdivide();\n      }\n\n      return (_e = ((_a = this.northEast) === null || _a === void 0 ? void 0 : _a.insert(point)) || ((_b = this.northWest) === null || _b === void 0 ? void 0 : _b.insert(point)) || ((_c = this.southEast) === null || _c === void 0 ? void 0 : _c.insert(point)) || ((_d = this.southWest) === null || _d === void 0 ? void 0 : _d.insert(point))) !== null && _e !== void 0 ? _e : false;\n    }\n  }, {\n    key: \"queryCircle\",\n    value: function queryCircle(position, radius) {\n      return this.query(new Circle(position.x, position.y, radius));\n    }\n  }, {\n    key: \"queryCircleWarp\",\n    value: function queryCircleWarp(position, radius, containerOrSize) {\n      var container = containerOrSize,\n          size = containerOrSize;\n      return this.query(new CircleWarp(position.x, position.y, radius, container.canvas !== undefined ? container.canvas.size : size));\n    }\n  }, {\n    key: \"queryRectangle\",\n    value: function queryRectangle(position, size) {\n      return this.query(new Rectangle(position.x, position.y, size.width, size.height));\n    }\n  }, {\n    key: \"query\",\n    value: function query(range, found) {\n      var _a, _b, _c, _d;\n\n      var res = found !== null && found !== void 0 ? found : [];\n\n      if (!range.intersects(this.rectangle)) {\n        return [];\n      }\n\n      var _iterator = _createForOfIteratorHelper(this.points),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var p = _step.value;\n\n          if (!range.contains(p.position) && getDistance(range.position, p.position) > p.particle.getRadius()) {\n            continue;\n          }\n\n          res.push(p.particle);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      if (this.divided) {\n        (_a = this.northEast) === null || _a === void 0 ? void 0 : _a.query(range, res);\n        (_b = this.northWest) === null || _b === void 0 ? void 0 : _b.query(range, res);\n        (_c = this.southEast) === null || _c === void 0 ? void 0 : _c.query(range, res);\n        (_d = this.southWest) === null || _d === void 0 ? void 0 : _d.query(range, res);\n      }\n\n      return res;\n    }\n  }, {\n    key: \"subdivide\",\n    value: function subdivide() {\n      var x = this.rectangle.position.x,\n          y = this.rectangle.position.y,\n          w = this.rectangle.size.width,\n          h = this.rectangle.size.height,\n          capacity = this.capacity;\n      this.northEast = new QuadTree(new Rectangle(x, y, w / 2, h / 2), capacity);\n      this.northWest = new QuadTree(new Rectangle(x + w / 2, y, w / 2, h / 2), capacity);\n      this.southEast = new QuadTree(new Rectangle(x, y + h / 2, w / 2, h / 2), capacity);\n      this.southWest = new QuadTree(new Rectangle(x + w / 2, y + h / 2, w / 2, h / 2), capacity);\n      this.divided = true;\n    }\n  }]);\n\n  return QuadTree;\n}();","map":{"version":3,"names":["Circle","CircleWarp","Rectangle","getDistance","QuadTree","rectangle","capacity","points","divided","point","_a","_b","_c","_d","_e","contains","position","length","push","subdivide","northEast","insert","northWest","southEast","southWest","radius","query","x","y","containerOrSize","container","size","canvas","undefined","width","height","range","found","res","intersects","p","particle","getRadius","w","h"],"sources":["C:/Users/golde/Documents/projects/portfolio/node_modules/tsparticles-engine/esm/Core/Utils/QuadTree.js"],"sourcesContent":["import { Circle } from \"./Circle\";\nimport { CircleWarp } from \"./CircleWarp\";\nimport { Rectangle } from \"./Rectangle\";\nimport { getDistance } from \"../../Utils/NumberUtils\";\nexport class QuadTree {\n    constructor(rectangle, capacity) {\n        this.rectangle = rectangle;\n        this.capacity = capacity;\n        this.points = [];\n        this.divided = false;\n    }\n    insert(point) {\n        var _a, _b, _c, _d, _e;\n        if (!this.rectangle.contains(point.position)) {\n            return false;\n        }\n        if (this.points.length < this.capacity) {\n            this.points.push(point);\n            return true;\n        }\n        if (!this.divided) {\n            this.subdivide();\n        }\n        return ((_e = (((_a = this.northEast) === null || _a === void 0 ? void 0 : _a.insert(point)) ||\n            ((_b = this.northWest) === null || _b === void 0 ? void 0 : _b.insert(point)) ||\n            ((_c = this.southEast) === null || _c === void 0 ? void 0 : _c.insert(point)) ||\n            ((_d = this.southWest) === null || _d === void 0 ? void 0 : _d.insert(point)))) !== null && _e !== void 0 ? _e : false);\n    }\n    queryCircle(position, radius) {\n        return this.query(new Circle(position.x, position.y, radius));\n    }\n    queryCircleWarp(position, radius, containerOrSize) {\n        const container = containerOrSize, size = containerOrSize;\n        return this.query(new CircleWarp(position.x, position.y, radius, container.canvas !== undefined ? container.canvas.size : size));\n    }\n    queryRectangle(position, size) {\n        return this.query(new Rectangle(position.x, position.y, size.width, size.height));\n    }\n    query(range, found) {\n        var _a, _b, _c, _d;\n        const res = found !== null && found !== void 0 ? found : [];\n        if (!range.intersects(this.rectangle)) {\n            return [];\n        }\n        for (const p of this.points) {\n            if (!range.contains(p.position) && getDistance(range.position, p.position) > p.particle.getRadius()) {\n                continue;\n            }\n            res.push(p.particle);\n        }\n        if (this.divided) {\n            (_a = this.northEast) === null || _a === void 0 ? void 0 : _a.query(range, res);\n            (_b = this.northWest) === null || _b === void 0 ? void 0 : _b.query(range, res);\n            (_c = this.southEast) === null || _c === void 0 ? void 0 : _c.query(range, res);\n            (_d = this.southWest) === null || _d === void 0 ? void 0 : _d.query(range, res);\n        }\n        return res;\n    }\n    subdivide() {\n        const x = this.rectangle.position.x, y = this.rectangle.position.y, w = this.rectangle.size.width, h = this.rectangle.size.height, capacity = this.capacity;\n        this.northEast = new QuadTree(new Rectangle(x, y, w / 2, h / 2), capacity);\n        this.northWest = new QuadTree(new Rectangle(x + w / 2, y, w / 2, h / 2), capacity);\n        this.southEast = new QuadTree(new Rectangle(x, y + h / 2, w / 2, h / 2), capacity);\n        this.southWest = new QuadTree(new Rectangle(x + w / 2, y + h / 2, w / 2, h / 2), capacity);\n        this.divided = true;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}